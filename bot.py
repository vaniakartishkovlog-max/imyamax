import asyncio
import random
import string
import threading
import os
from typing import Dict

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from flask import Flask

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TOKEN = os.getenv("BOT_TOKEN")  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –≤ Environment Variables Render
ADMIN_IDS = set()
# ========================

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

user_wallets: Dict[int, Dict] = {}
deals: Dict[str, Dict] = {}

class DealStates(StatesGroup):
    waiting_currency = State()
    waiting_wallet = State()
    waiting_amount = State()
    waiting_description = State()

main_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏"), types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")],
        [types.KeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"), types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

currency_kb = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text=c)] for c in ["USD", "RUB", "UAH", "USDT", "BTC", "TON", "Stars"]],
    resize_keyboard=True
)

def gen_deal_id() -> str:
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))

# ---- /start ----
@dp.message(CommandStart())
async def start(message: types.Message):
    text = message.text or ""
    parts = text.split()
    if len(parts) > 1 and parts[1].startswith("deal"):
        deal_id = parts[1][4:]
        if deal_id not in deals:
            await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        deal = deals[deal_id]
        if message.from_user.id == deal["seller_id"]:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –≤ —Å–≤–æ—é —Å–¥–µ–ª–∫—É –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.")
            return

        deal["buyer_id"] = message.from_user.id
        deal["buyer_username"] = message.from_user.username or str(message.from_user.id)

        try:
            await bot.send_message(
                deal["seller_id"],
                f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{deal['buyer_username']} –∑–∞—à–µ–ª –≤ –≤–∞—à—É —Å–¥–µ–ª–∫—É ‚Ññ{deal_id}"
            )
        except Exception:
            pass

        wallet_display = deal["wallet"] if deal["currency"] != "Stars" else "@PlayerokOTC"
        stars_note = ""
        if deal["currency"] == "Stars":
            stars_note = "–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏: –ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –ø–æ 100 Stars\n"

        buyer_kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"buyer_confirm_{deal_id}")],
            [types.InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", callback_data=f"buyer_exit_{deal_id}")]
        ])

        await message.answer(
            f"üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ #{deal_id}\n\n"
            f"üë§ –í—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ —Å–¥–µ–ª–∫–µ.\n"
            f"üìå –ü—Ä–æ–¥–∞–≤–µ—Ü: @{deal['seller_username']} ({deal['seller_id']})\n"
            f"‚Ä¢ –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: {deal['desc']}\n\n"
            f"üè¶ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã: {wallet_display}\n"
            f"{stars_note}"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {deal['amount']} {deal['currency']}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É(–º–µ–º–æ): {deal['memo']}\n\n"
            f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π.",
            reply_markup=buyer_kb
        )
        return

    try:
        await message.answer_photo(
            photo="https://playerok.com/og_playerok.png",
            caption=(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlayerokOTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç\n\n"
                "üíº –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"
            ),
            reply_markup=main_kb
        )
    except Exception:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlayerokOTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç\n\n"
            "üíº –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:",
            reply_markup=main_kb
        )

@dp.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @PlayerokOTC")

@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏")
async def manage_wallet(message: types.Message, state: FSMContext):
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=currency_kb)
    await state.set_state(DealStates.waiting_currency)

@dp.message(DealStates.waiting_currency)
async def set_currency(message: types.Message, state: FSMContext):
    chosen = message.text.strip()
    allowed = ["USD", "RUB", "UAH", "USDT", "BTC", "TON", "Stars"]
    if chosen not in allowed:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    if chosen == "Stars":
        user_wallets[message.from_user.id] = {"currency": "Stars", "wallet": "@PlayerokOTC"}
        await message.answer("‚úÖ –í–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: Stars", reply_markup=main_kb)
        await state.clear()
        return

    await state.update_data(currency=chosen)
    await message.answer(
        f"‚úÖ –í–∞–ª—é—Ç–∞ –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {chosen}\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(DealStates.waiting_wallet)

@dp.message(DealStates.waiting_wallet)
async def set_wallet(message: types.Message, state: FSMContext):
    data = await state.get_data()
    currency = data.get("currency")
    user_wallets[message.from_user.id] = {"currency": currency, "wallet": message.text.strip()}
    await message.answer(f"‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {message.text.strip()} ({currency})", reply_markup=main_kb)
    await state.clear()

@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
async def create_deal(message: types.Message, state: FSMContext):
    if message.from_user.id not in user_wallets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏'.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(DealStates.waiting_amount)

@dp.message(DealStates.waiting_amount)
async def deal_amount(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    await state.update_data(amount=text)
    currency = user_wallets[message.from_user.id]["currency"]
    await message.answer(f"üìù –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ –∑–∞ {text} {currency}:")
    await state.set_state(DealStates.waiting_description)

@dp.message(DealStates.waiting_description)
async def deal_description(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    amount = data.get("amount")
    desc = message.text.strip()
    wallet_info = user_wallets.get(user_id, {"currency": "USD", "wallet": "None"})

    deal_id = gen_deal_id()
    memo = f"{deal_id}{user_id}"

    deals[deal_id] = {
        "seller_id": user_id,
        "seller_username": message.from_user.username or str(user_id),
        "wallet": wallet_info["wallet"],
        "currency": wallet_info["currency"],
        "amount": amount,
        "desc": desc,
        "memo": memo,
        "buyer_id": None,
        "buyer_username": None
    }

    link = f"https://t.me/PlayerokOTC_Robot?start=deal{deal_id}"
    await message.answer(
        f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üí∞ –°—É–º–º–∞: {amount} {wallet_info['currency']}\n"
        f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {link}",
        reply_markup=main_kb
    )
    await state.clear()

@dp.callback_query(F.data.startswith("buyer_confirm_"))
async def buyer_confirm(callback: types.CallbackQuery):
    deal_id = callback.data.split("buyer_confirm_")[1]
    await callback.answer()
    await callback.message.edit_reply_markup(None)
    msg = await callback.message.answer("üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...")
    await asyncio.sleep(5)
    await msg.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@dp.callback_query(F.data.startswith("buyer_exit_"))
async def buyer_exit(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(None)
    await callback.message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–¥–µ–ª–∫–∏.")

@dp.message(Command(commands=["pepeteam"]))
async def pepeteam(message: types.Message):
    ADMIN_IDS.add(message.from_user.id)
    await message.answer("‚úÖ –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–æ–º. –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /buy #–∫–æ–¥")

@dp.message(F.text.startswith("/buy"))
async def admin_buy(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    text = message.text.strip()
    deal_id = None
    if "#" in text:
        deal_id = text.split("#", 1)[1].strip()
    else:
        parts = text.split()
        if len(parts) >= 2:
            deal_id = parts[1].strip()
    if not deal_id or deal_id not in deals:
        await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    deal = deals[deal_id]
    seller_id = deal["seller_id"]
    buyer_id = deal.get("buyer_id")

    confirm_kb = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥–∞—Ä–∫–∞", callback_data=f"seller_sent_{deal_id}")]]
    )

    await bot.send_message(
        seller_id,
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal_id}\n\n"
        f"üí∞ –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {deal['desc']}\n\n"
        f"–ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @PlayerokOTC –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∏–∂–µ:",
        reply_markup=confirm_kb
    )

    if buyer_id:
        await bot.send_message(
            buyer_id,
            f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n‚ñ∏ –°–¥–µ–ª–∫–∞: #{deal_id}\n‚ñ∏ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{deal['seller_username']}\n‚ñ∏ –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n‚ñ∏ –û–ø–∏—Å–∞–Ω–∏–µ: {deal['desc']}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ, –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–¥–∞—Ä–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @PlayerokOTC –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–∞."
        )

@dp.callback_query(F.data.startswith("seller_sent_"))
async def seller_sent(callback: types.CallbackQuery):
    deal_id = callback.data.split("seller_sent_")[1]
    if deal_id not in deals:
        await callback.message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    deal = deals[deal_id]
    buyer_id = deal.get("buyer_id")
    await callback.message.answer(
        f"‚è≥ –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ #{deal_id}\n‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥–∞—Ä–∫–∞\nüîé –ú–µ–Ω–µ–¥–∂–µ—Ä @PlayerokOTC –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ NFT\nüì≠ –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
        f"–ë–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ - —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
    )
    if buyer_id:
        await bot.send_message(
            buyer_id,
            f"‚è≥ –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ #{deal_id}\n‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥–∞—Ä–∫–∞\nüîé –ú–µ–Ω–µ–¥–∂–µ—Ä @PlayerokOTC –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ NFT\nüì≠ –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
            f"–ë–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤."
        )

        async def nft_check_simulation():
            await asyncio.sleep(300)
            if deal_id in deals:
                await bot.send_message(
                    buyer_id,
                    f"üö® NFT –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–°–¥–µ–ª–∫–∞: #{deal_id}\n–ü—Ä–∏—á–∏–Ω–∞: –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–∞ —É @PlayerokOTC.\n\n"
                    f"–†–µ—à–µ–Ω–∏–µ:\n1. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ @PlayerokOTC\n2. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                await bot.send_message(
                    deal["seller_id"],
                    f"üö® NFT –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal_id}. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–¥–∞—á—É –ø–æ–¥–∞—Ä–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É @PlayerokOTC."
                )
        asyncio.create_task(nft_check_simulation())

# ================== Flask —Å–µ—Ä–≤–µ—Ä ==================
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Bot is alive"

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

# ================== –ó–∞–ø—É—Å–∫ ==================
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    asyncio.run(main())
