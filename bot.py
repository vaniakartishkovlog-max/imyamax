import asyncio
import random
import string
import os
from typing import Dict

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = os.getenv("BOT_TOKEN")  # Fly.io environment variable
ADMIN_IDS = set()

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

user_wallets: Dict[int, Dict] = {}
deals: Dict[str, Dict] = {}

class DealStates(StatesGroup):
    waiting_currency = State()
    waiting_wallet = State()
    waiting_amount = State()
    waiting_description = State()

main_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏"), types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")],
        [types.KeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"), types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

currency_kb = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text=c)] for c in ["USD", "RUB", "UAH", "USDT", "BTC", "TON", "Stars"]],
    resize_keyboard=True
)

def gen_deal_id() -> str:
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlayerokOTC!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:",
        reply_markup=main_kb
    )

@dp.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @PlayerokOTC")

@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏")
async def manage_wallet(message: types.Message, state: FSMContext):
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=currency_kb)
    await state.set_state(DealStates.waiting_currency)

@dp.message(DealStates.waiting_currency)
async def set_currency(message: types.Message, state: FSMContext):
    chosen = message.text.strip()
    allowed = ["USD", "RUB", "UAH", "USDT", "BTC", "TON", "Stars"]
    if chosen not in allowed:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return
    if chosen == "Stars":
        user_wallets[message.from_user.id] = {"currency": "Stars", "wallet": "@PlayerokOTC"}
        await message.answer("‚úÖ –í–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: Stars", reply_markup=main_kb)
        await state.clear()
        return
    await state.update_data(currency=chosen)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è {chosen}:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(DealStates.waiting_wallet)

@dp.message(DealStates.waiting_wallet)
async def set_wallet(message: types.Message, state: FSMContext):
    data = await state.get_data()
    currency = data.get("currency")
    user_wallets[message.from_user.id] = {"currency": currency, "wallet": message.text.strip()}
    await message.answer(f"‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {message.text.strip()} ({currency})", reply_markup=main_kb)
    await state.clear()

@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
async def create_deal(message: types.Message, state: FSMContext):
    if message.from_user.id not in user_wallets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏'.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(DealStates.waiting_amount)

@dp.message(DealStates.waiting_amount)
async def deal_amount(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    await state.update_data(amount=message.text.strip())
    currency = user_wallets[message.from_user.id]["currency"]
    await message.answer(f"üìù –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ –∑–∞ {message.text.strip()} {currency}:")
    await state.set_state(DealStates.waiting_description)

@dp.message(DealStates.waiting_description)
async def deal_description(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    amount = data.get("amount")
    desc = message.text.strip()
    wallet_info = user_wallets.get(user_id, {"currency": "USD", "wallet": "None"})
    deal_id = gen_deal_id()
    deals[deal_id] = {
        "seller_id": user_id,
        "seller_username": message.from_user.username or str(user_id),
        "wallet": wallet_info["wallet"],
        "currency": wallet_info["currency"],
        "amount": amount,
        "desc": desc,
        "buyer_id": None
    }
    link = f"https://t.me/PlayerokOTC_Robot?start=deal{deal_id}"
    await message.answer(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\nüí∞ –°—É–º–º–∞: {amount} {wallet_info['currency']}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {link}", reply_markup=main_kb)
    await state.clear()

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
